<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="init()" layout="absolute"
				preloader="com.vidiun.preloaders.VmcPreloader" backgroundColor="#034F57" horizontalScrollPolicy="off"
				verticalScrollPolicy="off" backgroundAlpha="0" backgroundGradientAlphas="0,0"
				xmlns:components="com.pfp.components.*" xmlns:text="com.vidiun.controls.text.*" xmlns:validators="com.vidiun.validators.*">
	<mx:Style source="assets/vidiun.css"/>

	<mx:Metadata>
		[ResourceBundle("login")]
	</mx:Metadata>

	<mx:Script>
		<![CDATA[
			import com.vidiun.VidiunClient;
			import com.vidiun.analytics.GoogleAnalyticsConsts;
			import com.vidiun.analytics.GoogleAnalyticsTracker;
			import com.vidiun.analytics.VAnalyticsTracker;
			import com.vidiun.commands.MultiRequest;
			import com.vidiun.commands.adminUser.AdminUserSetInitialPassword;
			import com.vidiun.commands.adminUser.AdminUserUpdatePassword;
			import com.vidiun.commands.permission.PermissionList;
			import com.vidiun.commands.user.UserGetByLoginId;
			import com.vidiun.commands.user.UserLoginByLoginId;
			import com.vidiun.commands.user.UserResetPassword;
			import com.vidiun.config.VidiunConfig;
			import com.vidiun.events.VidiunEvent;
			import com.vidiun.types.VidiunPermissionStatus;
			import com.vidiun.types.VidiunStatsVmcEventType;
			import com.vidiun.utils.VUtils;
			import com.vidiun.vo.VidiunPermissionFilter;
			import com.vidiun.vo.VidiunPermissionListResponse;
			import com.vidiun.validators.EmailValidator;
			
			import mx.controls.Alert;
			import mx.events.ValidationResultEvent;
			import mx.resources.ResourceManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.URLUtil;
			import mx.validators.ValidationResult;
			import mx.validators.Validator;


			// =====================================================
			// members
			// =====================================================
			private static const VERSION:String = "1.2.9";

			private const LBL_WIDTH:Number = 120;

			/**
			 * the email address to be used from current point.
			 * */
			private var _relevantEmail:String;

			/**
			 * the password to be used from current point.
			 * */
			private var _relevantPwd:String;

			/**
			 * google analytics id
			 * */
			private var _urchinNumber:String;

			/**
			 * name of JS function to call when login returned successfully
			 * */
			private var _loginF:String = "loginF";

			/**
			 * client for posting API_v3 calls
			 * */
			private var _vc:VidiunClient;

			[Bindable]
			/**
			 * the protocol to use for posting calls
			 * */
			private var _protocol:String;

			[Bindable]
			/**
			 * dommain for partnerservices2 calls
			 * */
			private var _domain:String = "www.vidiun.com";

			/**
			 * users coming form registration email will have a hash
			 * key idetifying them.
			 * */
			private var _hashKey:String = "";

			/**
			 * "remember me"
			 * */
			private var _loginSO:SharedObject;


			// =====================================================
			// methods
			// =====================================================

			/**
			 * save parameters values to variables and initialize screen
			 * */
			private function init():void {
				Security.allowDomain('*');

				// decide protocol
				_protocol = getLoadingProtocol();

				// create client for API_v3 calls
				var configuration:VidiunConfig = new VidiunConfig();
				configuration.protocol = _protocol;
				configuration.domain = VUtils.hostFromCode(parameters.host);
				configuration.srvUrl = parameters.srvurl;
				_vc = new VidiunClient(configuration);

				// add context menu item
				var item:ContextMenuItem = new ContextMenuItem("VMC Login Version " + VERSION);
				contextMenu.customItems.push(item);

				// app parameters:
				_urchinNumber = parameters.urchinNumber;

				if (parameters.host) {
					if (URLUtil.isHttpURL(String(parameters.host)) || URLUtil.isHttpsURL(String(parameters.host)))
						_domain = parameters.host;
					else
						_domain = VUtils.hostFromCode(parameters.host);
				}

				if (parameters.loginF)
					_loginF = parameters.loginF;

				if (parameters.errorCode) {
					panels.selectedSide = "Back";
				}
				// new user / existing user?
				else if (parameters.hashKey) {
					_hashKey = parameters.hashKey;
					panels.selectedSide = 'Top';
				}

				setLocaleByParams();

				_loginSO = SharedObject.getLocal("VMCuser");
				if (_loginSO.data.loginName) {
					// assume this happens after email.creationComplete 
					email.text = _loginSO.data.loginName; 
					remember.selected = true;
				}
			}


			private function setLocaleByParams():void {
				var chain:Array = ["en_US"];
				if (parameters.hasOwnProperty('language')) {
					chain.unshift(parameters['language']);
				}
				ResourceManager.getInstance().localeChain = chain;
			}


			/**
			 * returns the protocol in which the swf was loaded.
			 * */
			private function getLoadingProtocol():String {
				var url:String = systemManager.loaderInfo.loaderURL;
				var ind:int = url.indexOf("//");
				var res:String = url.substring(0, ind + 2);

				// in case we debug localy use http as defualt
				if (res == "file://")
					res = "http://";

				return res;
			}


			/**
			 * "normal" login
			 * @param mail	previously entered email
			 * @param pwd	previously entered password
			 * @see #onUpdateResult()
			 * */
			private function adminLogin(mail:String = '', pwd:String = ''):void {

				// remember user name if required
				if (remember.selected) {
					_loginSO.data.loginName = email.text;
					_loginSO.flush();
				}
				else if (_loginSO.data.loginName){
					_loginSO.clear();
				}

				//Check email validator
				if (!validateTextField(email, emailValidator))
					return;

				//Check password validator
				if (!validateTextField(password, passwordValidator))
					return;

				// post request:
				var params:Object = new Object();
				if (mail != '') {
					params.email = mail;
				}
				else {
					params.email = email.text;
					_relevantEmail = email.text;

				}
				if (pwd != '') {
					params.password = pwd;
				}
				else {
					params.password = password.text;
					_relevantPwd = password.text;
				}

				var mr:MultiRequest = new MultiRequest();

				//First request to login will return the VS
				var ulblId:UserLoginByLoginId = new UserLoginByLoginId(params.email, params.password, int.MIN_VALUE, 86400/*24 hrs*/, "disableentitlement");

				//The second call will return the user data needed for the VMC
				var ugblId:UserGetByLoginId = new UserGetByLoginId(params.email);
				
				mr.addAction(ulblId);
				mr.addAction(ugblId);
				mr.addRequestParam("2:vs", "{1:result}");
				
				//the third call will check if username should be remembered
				if (remember.selected) {
					var filter:VidiunPermissionFilter = new VidiunPermissionFilter();
					filter.statusEqual = VidiunPermissionStatus.ACTIVE;
					filter.nameEqual = 'FEATURE_DISABLE_REMEMBER_ME';
					var permst:PermissionList = new PermissionList(filter);
					mr.addAction(permst);
					mr.addRequestParam("3:vs", "{1:result}");
				}

				mr.addEventListener(VidiunEvent.COMPLETE, onLoginResult);
				mr.addEventListener(VidiunEvent.FAILED, onLoginFault);

				_vc.post(mr);
			}


			/**
			 * On a successful login extract the vs an initiate the VMC via JS else alert
			 * */
			private function onLoginResult(event:VidiunEvent):void {
				var errorXml:XML = new XML(event.data[0]);

				if (errorXml && errorXml.hasOwnProperty('error')) {
					// see what went wrong
					var errCode:String = errorXml.error.code;
					if (errCode == "USER_NOT_FOUND" || errCode == "USER_WRONG_PASSWORD") {
						// show ADMIN_VUSER_NOT_FOUND eror message
						Alert.show(resourceManager.getString('login', "ADMIN_VUSER_NOT_FOUND"), resourceManager.getString('login', "invalidLogin"));
					}
					else if (errCode == "LOGIN_RETRIES_EXCEEDED") {
						// show LOGIN_RETRIES_EXCEEDED eror message
						Alert.show(resourceManager.getString('login', "LOGIN_RETRIES_EXCEEDED"), resourceManager.getString('login', "invalidLogin"));
					}
					else if (errCode == "PASSWORD_EXPIRED") {
						// show PASSWORD_EXPIRED eror message and rotate cube
						panels.selectedSide = 'Right';
					}
					else {
						var s:String = ResourceManager.getInstance().getString('login', errCode);
						if (s == null) {
							s = errorXml.error.message;
						}
						Alert.show(s, resourceManager.getString('login', "errorOcurred"));
					}

				}
				else {
					// On Success

					// Send notification to Google Analytics
					if (_urchinNumber) {
						var ga:GoogleAnalyticsTracker = GoogleAnalyticsTracker.getInstance();
						ga.init("", "", this, "VMC_ANDROMEDA/Login", _urchinNumber, "AS3", Application.application.parameters.gaDebug == "true" ? true : false);
						ga.sendToGA(GoogleAnalyticsConsts.LOGIN);
					}
					// Send notification to Vidiun
					var va:VAnalyticsTracker = VAnalyticsTracker.getInstance();
					va.init(_vc, "Login", VERSION, "");
					va.sendEvent(VidiunStatsVmcEventType.LOGIN, "pagingInEntryTable>Manage");

					// if we checked for rememberme permission and we have a saved value
					if (event.data.length > 2 && _loginSO.data.loginName){
						if ((event.data[2] as VidiunPermissionListResponse).totalCount > 0) {
							// we have an active "disable remember me"
							_loginSO.clear();
						}
					}
					loginF(event.data[1].partnerId, event.data[1].partnerId + "00", event.data[1].id, event.data[0], event.data[1].screenName, event.data[1].email);
				}
			}


			/**
			 * If we failed to Login Alert to the user the Server Messege
			 * */
			private function onLoginFault(event:VidiunEvent):void {
				Alert.show(event.error.errorMsg, resourceManager.getString('login', 'errorOccurred'));
			}


			/**
			 * validate both pwds are present and equal and call
			 * the setInitialPassword service.
			 * */
			protected function setInitialPwd(tf1:TextInputPrompt, tf2:TextInputPrompt):void {
				// validate
				if (tf1.text != tf2.text) {
					Alert.show(resourceManager.getString('login', 'pwdNoMatch'), resourceManager.getString('login', 'error'));
					return;
				}
				if (!validateTextField(tf1, passwordValidator)) {
					return;
				}
				if (!validateTextField(tf2, passwordValidator)) {
					return;
				}

				_relevantPwd = tf1.text;
				// post request
				var ausip:AdminUserSetInitialPassword = new AdminUserSetInitialPassword(_hashKey, tf1.text);
				ausip.addEventListener(VidiunEvent.COMPLETE, onSetInitialResult);
				ausip.addEventListener(VidiunEvent.FAILED, faultHandlerV3_a);
				_vc.post(ausip);
			}




			/**
			 * log the login event and call relevant JS function
			 * */
			private function loginF(partner_id:String, subp_id:String, uid:String, vs:String, screenName:String, uemail:String):void {
				// never ask JS to "remeber me" because VS is always created for 24 hours
				ExternalInterface.call(_loginF, false, partner_id, subp_id, uid, vs, screenName, uemail);

			}


			/**
			 * make sure the text in a text field is valid.
			 * @param target	UITextField or TextInput
			 * @param validator		the validator to use with this TF.
			 * */
			private function validateTextField(target:TextInputPrompt, validator:Validator):Boolean {
				cleanField(target);
				validator.source = target;

				var vre:ValidationResultEvent = validator.validate();
				return !(vre.results && (vre.results[0] as ValidationResult).isError);
			}



			/**
			 * if the text in a TF is its default text, remove the contents.
			 * @param textField		UITextField or TextInput
			 * */
			private function cleanField(textField:TextInputPrompt):void {
				if (textField.text == textField.promptText)
					textField["text"] = "";
			}


			/**
			 * send a request to recover pasword
			 * */
			private function resetPassword(tf:TextInputPrompt):void {
				if (!validateTextField(tf, emailValidator))
					return;

				_relevantEmail = tf.text;
				var resetPwd:UserResetPassword = new UserResetPassword(_relevantEmail);
				resetPwd.addEventListener(VidiunEvent.COMPLETE, onResetPassResult);
				resetPwd.addEventListener(VidiunEvent.FAILED, faultHandlerV3_a);
				_vc.post(resetPwd);
			}


			/**
			 * make sure both pwds are identical
			 * send server new data
			 * */
			protected function updatePwd():void {
				// validate
				if (pwd3.text != pwd4.text) {
					Alert.show(resourceManager.getString('login', 'pwdNoMatch'), resourceManager.getString('login', 'error'));
					return;
				}
				if (!validateTextField(pwd5, passwordValidator)) {
					return;
				}
				if (!validateTextField(pwd3, passwordValidator)) {
					return;
				}
				if (!validateTextField(pwd4, passwordValidator)) {
					return;
				}

				// post request
				_relevantEmail = email.text;
				_relevantPwd = pwd3.text;
				var auup:AdminUserUpdatePassword = new AdminUserUpdatePassword(email.text, pwd5.text, '', pwd3.text);
				auup.addEventListener(VidiunEvent.COMPLETE, onUpdateResult);
				auup.addEventListener(VidiunEvent.FAILED, faultHandlerV3_a);
				_vc.post(auup);
			}


			/**
			 * login using saved data
			 * */
			protected function onUpdateResult(event:VidiunEvent):void {
				// we assume the user entered his email when he first logged in, 
				// before being asked to update pwd, and use the pwd sent in update.
				adminLogin(_relevantEmail, _relevantPwd);
			}


			/**
			 * set intial password successfull </br>
			 * show normal login panel
			 * */
			protected function onSetInitialResult(event:VidiunEvent):void {
				Alert.show(ResourceManager.getInstance().getString('login', 'pleaseLogin'));
				panels.selectedSide = "Front";
			}


			private function faultHandlerV3_a(event:VidiunEvent):void {
				faultHandlerV3(event, parameters.displayErrorFromServer == "true");
			}

			/**
			 * General fault handler for API_v3 <br>
			 * shows a message from locale, or server.
			 * */
			private function faultHandlerV3(event:VidiunEvent, displayErrorFromServer:Boolean = false):void {
				var s:String = ResourceManager.getInstance().getString('login', event.error.errorCode);
				if (s == null || displayErrorFromServer) {
					s = event.error.errorMsg;
				}
				Alert.show(s, ResourceManager.getInstance().getString('login', 'errorOccurred'));
			}



			/**
			 * General fault handler for PS2.
			 * Triggered when the *service* goes wrong,
			 * not when the *required action* goes wrong
			 * */
			private function faultHandler(event:FaultEvent):void {
				Alert.show(event.message.toString(), resourceManager.getString('login', 'errorOccurred'));
			}


			/**
			 * tell the user if password reset went ok or not.
			 * */
			private function onResetPassResult(event:VidiunEvent):void {
				if (event.error!= null)
					Alert.show(event.error.errorMsg, resourceManager.getString('login', 'errorOccurred'));
				else
					Alert.show(resourceManager.getString('login', 'resetMess', [_relevantEmail]));
			}



			/**
			 * hide / show forget password panel
			 * */
			protected function toggleForgotPassword():void {
				if (panels.selectedSide == "Front") {
					panels.selectedSide = "Left";
				}
				else {
					panels.selectedSide = "Front";
				}
			}

		]]>
	</mx:Script>



	<!-- Validators -->
	<mx:StringValidator id="passwordValidator" required="true" property="text" minLength="1" maxLength="200"/>
	<validators:EmailValidator id="emailValidator" required="true" property="text"/>


	<!-- UI -->
	<components:CubeStack id="panels" width="380" height="220" horizontalCenter="0" verticalCenter="0"
						  horizontalScrollPolicy="off" verticalScrollPolicy="off">
		<!-- login details -->
		<mx:TitleWindow title="{resourceManager.getString('login', 'login')}" showCloseButton="false"
						keyDown="{if(event.keyCode == Keyboard.ENTER)adminLogin();}" name="Front">

			<mx:VBox width="100%" height="100%" paddingLeft="0" paddingRight="0" paddingTop="0" paddingBottom="0">
				<mx:HBox paddingLeft="0" paddingRight="0" paddingTop="0" paddingBottom="0" width="100%" >
					<mx:Label width="{LBL_WIDTH}" text="{resourceManager.getString('login', 'email')}:"/>
					<text:TextInputPrompt id="email" width="100%"  
										  promptText="{resourceManager.getString('login', 'enterEmail')}" />
				</mx:HBox>
				<mx:HBox paddingLeft="0" paddingRight="0" paddingTop="0" paddingBottom="0" width="100%" >
					<mx:Label width="{LBL_WIDTH}" text="{resourceManager.getString('login', 'password')}:"/>
					<text:TextInputPrompt id="password" displayAsPassword="true" width="100%" 
										  promptText="{resourceManager.getString('login', 'enterPassword')}" />
				</mx:HBox>
				<mx:CheckBox id="remember" label="{resourceManager.getString('login', 'rememberMe')}"/>
			</mx:VBox>
			<mx:ControlBar paddingLeft="4" paddingRight="4" paddingTop="4" paddingBottom="4" horizontalGap="0">
				<mx:LinkButton label="{resourceManager.getString('login', 'forgotPassword')}"
							   click="toggleForgotPassword()" buttonMode="true"/>
				<mx:VRule height="10" visible="{Application.application.parameters.visibleSignup=='true'}"/>
				<mx:LinkButton label="{resourceManager.getString('login', 'signup')}"
							   click="{ExternalInterface.call('gotoSignup')}" buttonMode="true"
							   visible="{Application.application.parameters.visibleSignup=='true'}"/>
				<mx:Spacer width="100%"/>
				<mx:Button label="{resourceManager.getString('login', 'login')}" buttonMode="true" click="adminLogin()"/>
			</mx:ControlBar>
		</mx:TitleWindow>

		<!-- forgot password section -->
		<mx:TitleWindow title="{resourceManager.getString('login', 'forgotPassword')}" showCloseButton="false"
						keyDown="{if(event.keyCode == Keyboard.ENTER)resetPassword(email2);}" name="Left">
			<mx:VBox width="100%" height="100%" paddingLeft="0" paddingRight="0" paddingTop="0" paddingBottom="0">
				<mx:Text width="95%" htmlText="{resourceManager.getString('login', 'forgotPasswordText')}"/>
				<mx:HBox verticalAlign="middle" width="100%">
					<mx:Label text="{resourceManager.getString('login', 'email')}:"/>
					<text:TextInputPrompt id="email2" width="100%" 
										  promptText="{resourceManager.getString('login', 'enterEmail')}" />
				</mx:HBox>
			</mx:VBox>
			<mx:ControlBar paddingLeft="4" paddingRight="4" paddingTop="4" paddingBottom="4">
				<mx:LinkButton label="{resourceManager.getString('login', 'login')}" click="toggleForgotPassword()"
							   buttonMode="true"/>
				<mx:VRule height="10" visible="{Application.application.parameters.visibleSignup=='true'}"/>
				<mx:LinkButton label="{resourceManager.getString('login', 'signup')}"
							   click="{ExternalInterface.call('gotoSignup')}" buttonMode="true"
							   visible="{Application.application.parameters.visibleSignup=='true'}"/>
				<mx:Spacer width="100%"/>
				<mx:Button label="{resourceManager.getString('login', 'send')}" buttonMode="true"
						   click="resetPassword(email2)"/>
			</mx:ControlBar>
		</mx:TitleWindow>


		<!-- invalid / corrupt hashcode section -->
		<mx:TitleWindow title="{resourceManager.getString('login', 'invalidHash')}" showCloseButton="false"
						keyDown="{if(event.keyCode == Keyboard.ENTER)resetPassword(email3);}" name="Back">
			<mx:VBox width="100%" height="100%" paddingLeft="0" paddingRight="0" paddingTop="0" paddingBottom="0">
				<mx:Text width="95%" text="{resourceManager.getString('login', 'invalidHashText')}"/>
				<mx:HBox verticalAlign="middle" width="100%">
					<mx:Label text="{resourceManager.getString('login', 'email')}:"/>
					<text:TextInputPrompt id="email3" promptText="{resourceManager.getString('login', 'enterEmail')}" />
				</mx:HBox>
			</mx:VBox>
			<mx:ControlBar paddingLeft="4" paddingRight="4" paddingTop="4" paddingBottom="4">
				<mx:LinkButton label="{resourceManager.getString('login', 'login')}" click="toggleForgotPassword()"
							   buttonMode="true"/>
				<mx:Spacer width="100%"/>
				<mx:Button label="{resourceManager.getString('login', 'send')}" buttonMode="true"
						   click="resetPassword(email3)"/>
			</mx:ControlBar>
		</mx:TitleWindow>

		<!-- pwd expired section -->
		<mx:TitleWindow title="{resourceManager.getString('login', 'pwdExpired')}" showCloseButton="false"
						keyDown="{if(event.keyCode == Keyboard.ENTER) updatePwd();}" name="Right">
			<mx:VBox width="100%" height="100%">
				<mx:Text selectable="false" text="{resourceManager.getString('login', 'pwdExpiredText')}" width="95%"/>
				<mx:HBox width="100%">
					<mx:Label text="{resourceManager.getString('login', 'enterOldPassword')}" width="{LBL_WIDTH}"/>
					<text:TextInputPrompt id="pwd5" width="100%" displayAsPassword="true" 
										  promptText="{resourceManager.getString('login', 'enterPassword')}" />
				</mx:HBox>
				<mx:HBox width="100%">
					<mx:Label text="{resourceManager.getString('login', 'enterNewPassword')}" width="{LBL_WIDTH}"/>
					<text:TextInputPrompt id="pwd3" width="100%" displayAsPassword="true"
										  promptText="{resourceManager.getString('login', 'enterPassword')}" />
				</mx:HBox>
				<mx:HBox width="100%">
					<mx:Label text="{resourceManager.getString('login', 'confirmPassword')}" width="{LBL_WIDTH}"/>
					<text:TextInputPrompt id="pwd4" width="100%" displayAsPassword="true" 
										  promptText="{resourceManager.getString('login', 'enterPassword')}" />
				</mx:HBox>
			</mx:VBox>
			<mx:ControlBar paddingLeft="4" paddingRight="4" paddingTop="4" paddingBottom="4">
				<mx:Spacer width="100%"/>
				<mx:Button label="{resourceManager.getString('login', 'send')}" buttonMode="true" click="updatePwd()"/>
			</mx:ControlBar>
		</mx:TitleWindow>


		<!-- new user (HBO) -->
		<mx:TitleWindow title="{resourceManager.getString('login', 'setInitialPassword')}" showCloseButton="false"
						keyDown="{if(event.keyCode == Keyboard.ENTER)setInitialPwd(pwd1, pwd2);}" name="Top">

			<mx:VBox width="100%" height="100%">
				<mx:Text selectable="false" text="{resourceManager.getString('login', 'welcome')}" width="95%"/>
				<mx:HBox width="100%">
					<mx:Label text="{resourceManager.getString('login', 'enterNewPassword')}" width="{LBL_WIDTH}"/>
					<text:TextInputPrompt id="pwd1" width="100%" displayAsPassword="true" 
										  promptText="{resourceManager.getString('login', 'enterPassword')}" />
				</mx:HBox>
				<mx:HBox width="100%">
					<mx:Label text="{resourceManager.getString('login', 'confirmPassword')}" width="{LBL_WIDTH}"/>
					<text:TextInputPrompt id="pwd2" width="100%" displayAsPassword="true" 
										  promptText="{resourceManager.getString('login', 'enterPassword')}" />
				</mx:HBox>
			</mx:VBox>
			<mx:ControlBar paddingLeft="4" paddingRight="4" paddingTop="4" paddingBottom="4">
				<mx:Spacer width="100%"/>
				<mx:Button label="{resourceManager.getString('login', 'send')}" buttonMode="true"
						   click="setInitialPwd(pwd1, pwd2)"/>
			</mx:ControlBar>
		</mx:TitleWindow>

		<mx:VBox name="Bottom"/>
	</components:CubeStack>

</mx:Application>
